@startuml
title Debounced button as LED ARM/DISARM
footer (C)2022 Sean Donnellan, Fynn Donnellan

skinparam activity {
  StartColor black
  BarColor black/blue
  EndColor black
  BackgroundColor #fff/green
  DiamondBackgroundColor #fff/red
  BorderColor black
  BorderThickness 0
}
skinparam note {
  BackgroundColor #fff/green
}
skinparam ArrowColor black
skinparam BackgroundColor #aaf/fff
skinparam legendBackgroundColor #fff/aaf
skinparam LegendBorderThickness 0
skinparam PartitionBackgroundColor #aaf/fff

start
  partition init {
    :Variables;
    note left
      const int buttonPin = 9;    
      const int ledPin = LED_BUILTIN;    
      //start with led OFF  
      int ledState = LOW;        
      int buttonState; 
      //unpressed is assumd            
      int lastButtonState;   
      unsigned long lastDebounceTime = 0;  
      unsigned long debounceDelay = 50; 
    end note
    :Void setup;
    note left
      void setup() {
        //default unpressed=HIGH
        pinMode(buttonPin, INPUT_PULLUP);
        pinMode(ledPin, OUTPUT);
        Serial.begin(115200);
        digitalWrite(ledPin, ledState);
        int buttonState = digitalRead(buttonPin);
        lastButtonState=buttonState;
        Serial.println("setup complete");
        Serial.print("Button is ");
        Serial.println(buttonState);
      }
    end note
  }
	repeat
	  :int reading = digitalRead(buttonPin);
    partition timer {
      if (if reading != lastbuttonstate) then (true)
	    :lastDebounceTime = millis();
      note left
        reset the debouncing timer
      end note
      endif
    }
    partition debouncer {
      if (if ((millis() - lastDebounceTime) > debounceDelay)) then (true)
        if (if (reading != buttonState)) then (true)
          :buttonState = reading;
          :Serial.println("transition");
	        partition debounced {
          	if (if (buttonState == LOW)) then (true)
            	:ledState = LOW;
              :Serial.println("ARMED");
            else (false)
              :Serial.println("DISARMED");
              :ledState = HIGH;
          	endif
	        }
        endif
      endif
    }
    :digitalWrite(ledPin, ledState);
    note left
    	Set LED to the state in ledState
    end note
    :lastButtonState = reading;
 

legend
Debounced button in main loop (armed/disarmed)
end legend



@enduml
